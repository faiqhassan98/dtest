{"version":3,"sources":["turbopack:///[project]/src/lib/api.ts","turbopack:///[project]/node_modules/next/navigation.js","turbopack:///[project]/src/app/test/page.tsx"],"sourcesContent":["import { \n  LoginResponse, Test, TestAttempt, TestAttemptResponse, User, Overview, \n  UserPerformance\n} from './types';\n\nconst BASE = process.env.NEXT_PUBLIC_API_BASE ?? '/api';\n\nasync function request<T>(path: string, opts: RequestInit = {}): Promise<T> {\n  const token = typeof window !== 'undefined' ? localStorage.getItem('dtest_token') : null;\n  const headers: Record<string,string> = { 'Content-Type': 'application/json' };\n  if (token) headers['Authorization'] = `Bearer ${token}`;\n  \n  const res = await fetch(`${BASE}${path}`, { ...opts, headers });\n  if (!res.ok) {\n    const body = await res.json().catch(() => ({ message: res.statusText }));\n    throw new Error(body.message || res.statusText);\n  }\n  return res.json();\n}\n\n// Auth\nexport const login = (email: string, password: string): Promise<LoginResponse> =>\n  request<LoginResponse>('/auth/login', { method: 'POST', body: JSON.stringify({ email, password }) });\n\n// Tests\nexport const fetchNextTest = (level?: string): Promise<Test> =>\n  request<Test>(`/tests/next${level ? `?level=${level}` : ''}`);\n\nexport const startTest = (id: string): Promise<Test> =>\n  request<Test>(`/tests/${id}/start`);\n\nexport const submitAttempt = (testId: string, responses: { questionId: string; answer: string | boolean }[]): Promise<TestAttemptResponse> =>\n  request<TestAttemptResponse>(`/attempts/${testId}/submit`, { method: 'POST', body: JSON.stringify({ responses }) });\n\nexport const getMyResults = (): Promise<TestAttempt[]> =>\n  request<TestAttempt[]>('/attempts/me');\n\n// Admin users\nexport const listUsers = (): Promise<User[]> => request<User[]>('/users');\n\nexport const createUser = (payload: Omit<User, '_id'>): Promise<User> =>\n  request<User>('/users', { method: 'POST', body: JSON.stringify(payload) });\n\nexport const updateUser = (id:string, payload: Partial<User>): Promise<User> =>\n  request<User>(`/users/${id}`, { method: 'PATCH', body: JSON.stringify(payload) });\n\nexport const deleteUser = (id:string): Promise<{ success: boolean }> =>\n  request<{ success: boolean }>(`/users/${id}`, { method: 'DELETE' });\n\n// Admin tests\nexport const listTests = (): Promise<Test[]> => request<Test[]>('/tests');\n\nexport const createTest = (payload: Omit<Test, '_id'>): Promise<Test> =>\n  request<Test>('/tests', { method: 'POST', body: JSON.stringify(payload) });\n\nexport const updateTest = (id:string, payload: Partial<Test>): Promise<Test> =>\n  request<Test>(`/tests/${id}`, { method: 'PATCH', body: JSON.stringify(payload) });\n\nexport const deleteTest = (id:string): Promise<{ success: boolean }> =>\n  request<{ success: boolean }>(`/tests/${id}`, { method: 'DELETE' });\n\n// Stats\nexport const getOverview = (): Promise<Overview> => request<Overview>('/stats/overview');\n\nexport const getUserPerformance = (userId: string): Promise<UserPerformance> =>\n  request<UserPerformance>(`/stats/user/${userId}`);\n","module.exports = require('./dist/client/components/navigation')\n","\"use client\";\n\nimport { useEffect, useState, Suspense } from \"react\";\nimport { useSearchParams, useRouter } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { startTest, submitAttempt } from \"@/lib/api\";\nimport {\n  Test,\n  TestQuestion,\n  TestPassage,\n  TestAttemptResponse,\n} from \"@/lib/types\";\n\ninterface Response {\n  questionId: string;\n  answer: string | boolean;\n}\n\n// Child component that uses useSearchParams\nfunction TestContent() {\n  const sp = useSearchParams();\n  const router = useRouter();\n  const [id, setId] = useState<string | null>(null);\n  const [attemptId, setAttemptId] = useState<string | null>(null);\n  const [test, setTest] = useState<Test | null>(null);\n  const [answers, setAnswers] = useState<Record<string, string | boolean>>({});\n\n  useEffect(() => {\n    setId(sp.get(\"id\"));\n    setAttemptId(sp.get(\"attemptId\"));\n  }, [sp]);\n\n  useEffect(() => {\n    if (id) load(id);\n    if (attemptId) {\n      // Optionally fetch previous attempt result\n    }\n  }, [id, attemptId]);\n\n  async function load(testId: string) {\n    const t: Test = await startTest(testId);\n    setTest(t);\n  }\n\n  async function submit() {\n    if (!test) return;\n    const responses: Response[] = Object.keys(answers).map((qid) => ({\n      questionId: qid,\n      answer: answers[qid],\n    }));\n    const res: TestAttemptResponse = await submitAttempt(test._id, responses);\n    alert(`Score: ${res.score}%`);\n    router.push(\"/user/dashboard\");\n  }\n\n  if (!test) return <div>Loading test...</div>;\n\n  return (\n    <div>\n      <h2 className=\"text-xl font-semibold mb-4\">\n        Reading Test ({test.level})\n      </h2>\n      {test.passages.map((p: TestPassage) => (\n        <div key={p._id} className=\"mb-6\">\n          <div className=\"mb-2 p-4 border rounded bg-white\">{p.text}</div>\n          <div className=\"space-y-3 mt-2\">\n            {p.questions.map((q: TestQuestion) => (\n              <div key={q._id} className=\"p-3 border rounded\">\n                <div className=\"font-medium\">{q.text}</div>\n\n                {q.type === \"mcq\" &&\n                  (q.options || []).map((opt) => (\n                    <label key={opt} className=\"block\">\n                      <input\n                        type=\"radio\"\n                        name={q._id}\n                        onChange={() =>\n                          setAnswers((prev) => ({ ...prev, [q._id]: opt }))\n                        }\n                      />{\" \"}\n                      {opt}\n                    </label>\n                  ))}\n\n                {q.type === \"tf\" && (\n                  <div>\n                    <label>\n                      <input\n                        type=\"radio\"\n                        name={q._id}\n                        onChange={() =>\n                          setAnswers((prev) => ({ ...prev, [q._id]: true }))\n                        }\n                      />{\" \"}\n                      True\n                    </label>\n                    <label className=\"ml-4\">\n                      <input\n                        type=\"radio\"\n                        name={q._id}\n                        onChange={() =>\n                          setAnswers((prev) => ({ ...prev, [q._id]: false }))\n                        }\n                      />{\" \"}\n                      False\n                    </label>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      ))}\n\n      <Button onClick={submit}>Submit</Button>\n    </div>\n  );\n}\n\n// Main page component\nexport default function TestPage() {\n  return (\n    <Suspense fallback={<div>Loading test page...</div>}>\n      <TestContent />\n    </Suspense>\n  );\n}"],"names":[],"mappings":"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","ignoreList":[1]}